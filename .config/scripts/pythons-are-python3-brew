#!/bin/zsh

# --- pythons-are-python3-brew ---
#
# Purpose:
#   This script creates or updates symlinks in ~/bin so that the "python"
#   and "python3" commands points
#   to the Homebrew-installed Python 3 interpreter (e.g., /home/linuxbrew/.linuxbrew/bin/python3).
#
# This script will create or update two symlinks in ~/bin:
#    - "python3"  will point to the Brew-installed Python
#    (e.g., /home/linuxbrew/.linuxbrew/bin/python3).
#    - "python"   will point to the same Brew-installed Python.
#
# Background:
#   Some Neovim plugins—such as overseer.nvim—invoke "python" (instead of "python3") to run
#   tasks or compilers. On systems where only Python 3 is installed, this may cause failures.
#   This script "fakes" a Python 2-style executable by making "python" point to Python 3.
#
# Usage:
#   Run the script to force the symlink updates in your user-writable directory (~/bin).
#
#   Note: Ensure ~/bin is in your PATH (preferably at the beginning) by setting:
#         export PATH="$HOME/bin:$PATH"
#
# Set DEBUG=1 to enable detailed debug messages; leave it unset or 0 for quiet operation.
DEBUG=${DEBUG:-0}

# Utility function: only echo if DEBUG is enabled.
debug_echo() {
  if [ "$DEBUG" -eq 1 ]; then
    echo "$@"

  fi
}

# Step 1: Get the Brew-installed python using which.
BREW_PYTHON=$(echo "$(brew --prefix)/bin/python3")

debug_echo "Brew python3 is: $BREW_PYTHON"

if [ -z "$BREW_PYTHON" ]; then

  echo "Brew python3 not found! Please ensure it is installed and in your PATH."
  exit 1
fi

# Step 2: Define the desired symlink locations.
PYTHON3_SYMLINK="$HOME/bin/python3"

PYTHON_SYMLINK="$HOME/bin/python"
debug_echo "Symlink to create for python3: $PYTHON3_SYMLINK"
debug_echo "Symlink to create for python:  $PYTHON_SYMLINK"

# --- Clean Up Existing Symlinks for python3 ---
if [ -L "$PYTHON3_SYMLINK" ]; then

  CURRENT_TARGET=$(readlink "$PYTHON3_SYMLINK")
  debug_echo "Existing python3 symlink points to: $CURRENT_TARGET"
  if [ "$CURRENT_TARGET" = "$BREW_PYTHON" ]; then

    debug_echo "python3 symlink is already correct. No action needed."
  else
    debug_echo "python3 symlink target is different. Removing the old symlink..."
    rm "$PYTHON3_SYMLINK"

    debug_echo "Removed existing python3 symlink: $PYTHON3_SYMLINK"
  fi
fi

# --- Create or Update the python3 Symlink ---
ln -sf "$BREW_PYTHON" "$PYTHON3_SYMLINK"
debug_echo "Created/updated python3 symlink: $PYTHON3_SYMLINK -> $BREW_PYTHON"

# --- Clean Up Existing Symlinks for python ---
if [ -L "$PYTHON_SYMLINK" ]; then
  CURRENT_PYTHON_TARGET=$(readlink "$PYTHON_SYMLINK")
  debug_echo "Existing python symlink points to: $CURRENT_PYTHON_TARGET"
  if [ "$CURRENT_PYTHON_TARGET" = "$BREW_PYTHON" ]; then
    debug_echo "python symlink is already correct. No action needed."
  else
    debug_echo "python symlink target is different. Removing the old symlink..."
    rm "$PYTHON_SYMLINK"
    debug_echo "Removed existing python symlink: $PYTHON_SYMLINK"
  fi
fi

# --- Create or Update the python Symlink ---
ln -sf "$BREW_PYTHON" "$PYTHON_SYMLINK"
debug_echo "Created/updated python symlink: $PYTHON_SYMLINK -> $BREW_PYTHON"

# --- How to Undo ---
# To remove the override for python3, simply run:
#    rm "$PYTHON3_SYMLINK"
# This will delete the symlink from ~/bin, so that the system will use the next
# python3 found in your PATH.
#
# To also remove the override for python, run:
#    rm "$PYTHON_SYMLINK"
# This will delete the symlink from ~/bin, so that the system will use the next
# python executable found in your PATH.
